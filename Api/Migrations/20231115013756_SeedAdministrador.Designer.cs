// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinimalApi.Infraestrutura.Db;
using System.Security.Cryptography;
using System.Text;

#nullable disable

namespace mininal_api.Migrations
{
    [DbContext(typeof(DbContexto))]
    [Migration("20231115013756_SeedAdministrador")]
    partial class SeedAdministrador
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MinimalApi.Dominio.Entidades.Administrador", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("varchar(255)");

                b.Property<string>("Perfil")
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnType("varchar(10)");

                b.Property<string>("Senha")
                    .IsRequired()
                    .HasMaxLength(64) // atualizado para SHA256
                    .HasColumnType("varchar(64)");

                b.HasKey("Id");

                b.ToTable("Administradores");

                b.HasData(
                    new
                    {
                        Id = 1,
                        Email = "administrador@teste.com",
                        Perfil = "Adm",
                        Senha = GerarHashSenha("123456")
                    });
            });
#pragma warning restore 612, 618
        }

        // Função para gerar hash SHA256
        private static string GerarHashSenha(string senha)
        {
            using var sha256 = SHA256.Create();
            var bytes = Encoding.UTF8.GetBytes(senha);
            var hash = sha256.ComputeHash(bytes);
            return Convert.ToHexString(hash); // 64 caracteres hex
        }
    }
}
